generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Message {
  id          String      @id @default(uuid())
  content     String
  type        MessageType @default(TEXT)
  senderId    String
  roomId      String
  isPrivate   Boolean     @default(false)
  recipientId String?
  createdAt   DateTime    @default(now())
  Room        Room        @relation(fields: [roomId], references: [id], onDelete: Cascade)
  User        User        @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([roomId, createdAt])
  @@index([senderId])
}

model Notebook {
  id           String         @id @default(uuid())
  ownerId      String
  title        String
  description  String?
  tags         String[]
  isShared     Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  User         User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  NotebookPage NotebookPage[]

  @@index([ownerId])
}

model NotebookPage {
  id         String   @id @default(uuid())
  notebookId String
  pageNumber Int
  vectorJson Json?
  pdfAssetId String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Notebook   Notebook @relation(fields: [notebookId], references: [id], onDelete: Cascade)

  @@unique([notebookId, pageNumber])
  @@index([notebookId])
}

model Room {
  id         String       @id @default(uuid())
  name       String
  type       RoomType
  maxUsers   Int          @default(50)
  mapData    Json
  createdAt  DateTime     @default(now())
  Message    Message[]
  RoomMember RoomMember[]

  @@index([type])
}

model RoomMember {
  id        String   @id @default(uuid())
  userId    String
  roomId    String
  positionX Float    @default(0)
  positionY Float    @default(0)
  joinedAt  DateTime @default(now())
  Room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
  @@index([roomId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  refreshToken String   @unique
  accessToken  String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([refreshToken])
  @@index([userId])
}

model User {
  id                                 String       @id @default(uuid())
  email                              String       @unique
  username                           String       @unique
  passwordHash                       String
  displayName                        String?
  avatarUrl                          String?
  avatarConfig                       Json?
  status                             UserStatus   @default(OFFLINE)
  lastLoginAt                        DateTime?
  createdAt                          DateTime     @default(now())
  updatedAt                          DateTime     @updatedAt
  Message                            Message[]
  Notebook                           Notebook[]
  RoomMember                         RoomMember[]
  Session                            Session[]
  VoiceCall_VoiceCall_calleeIdToUser VoiceCall[]  @relation("VoiceCall_calleeIdToUser")
  VoiceCall_VoiceCall_callerIdToUser VoiceCall[]  @relation("VoiceCall_callerIdToUser")

  @@index([email])
  @@index([status])
}

model VoiceCall {
  id                            String     @id @default(uuid())
  callerId                      String
  calleeId                      String
  status                        CallStatus @default(INITIATED)
  startedAt                     DateTime   @default(now())
  endedAt                       DateTime?
  User_VoiceCall_calleeIdToUser User       @relation("VoiceCall_calleeIdToUser", fields: [calleeId], references: [id], onDelete: Cascade)
  User_VoiceCall_callerIdToUser User       @relation("VoiceCall_callerIdToUser", fields: [callerId], references: [id], onDelete: Cascade)

  @@index([calleeId])
  @@index([callerId])
}

enum CallStatus {
  INITIATED
  RINGING
  ACTIVE
  ENDED
  REJECTED
}

enum MessageType {
  TEXT
  SYSTEM
  NOTIFICATION
}

enum RoomType {
  CLASSROOM
  GALLERY
  PARK
  CUSTOM
}

enum UserStatus {
  ONLINE
  OFFLINE
  AWAY
  BUSY
}
